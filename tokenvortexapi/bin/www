#!/usr/bin/env node
require("dotenv").config();
var sockets = require("../socket");
var app = require('../app');
var http = require('http');

var port = normalizePort(process.env.PORT || '9002');
app.set('port', port);



var server = http.createServer(app);
const io = require("socket.io")(server);
sockets.connect(io, 9002);
const mongoose = require("mongoose");


const cnString = process.env.CN_STRING


mongoose.connect(cnString, {
  useNewUrlParser: true,
  useUnifiedTopology: true
});


const mongoose_cn = mongoose.connection;
mongoose_cn.on("error", console.error.bind(console, "connection error:"));
mongoose_cn.once("open", function() {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    console.log(`http://localhost:${addr.port}`);
  }
